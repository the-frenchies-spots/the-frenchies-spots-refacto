generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["fullTextSearch"]
}

generator appsync {
  provider = "prisma-client-js"
    // provider = "prisma-dbml-generator"
}

datasource db {
  provider          = "mongodb"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Level {
  Warning
  Info
  Error
}

enum CategoriesSpotAndTag {
  SPARE_TIME_SPOT
  RESOURCES_SPOT
}

enum Role {
  SIMPLE_USER
  USER_ADMIN
}

model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  email             String   @unique
  hashedPassword    String
  hashedRefreshToken String?
  role              Role     @default(SIMPLE_USER)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  profile           Profile?
}

model Profile {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  pseudo         String   @unique
  photoUrl       String?
  gamePoint      Int      @default(0)
  userId         String   @unique @db.ObjectId
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  spots          Spot[]
  ratings        Rating[]
  favorites      Favorite[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

enum GeoJSONPoint {
  Point
}

type Location {
  type GeoJSONPoint
  coordinates Float[]
}

model Spot {
  id            String                @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  isCanPark     Boolean               @default(false)
  isHidden      Boolean               @default(false)
  category      CategoriesSpotAndTag
  profile       Profile               @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String                @unique @db.ObjectId
  lat           Float
  lng           Float
  location      Location
  region        String
  address       String
  averageRating Float                 @default(0)
  spotPicture   SpotPicture[]
  ratings       Rating[]
  favorites     Favorite[]
  tags          TagsOnSpots[]
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @default(now())
}

model TagsOnSpots {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  spot      Spot?    @relation(fields: [spotId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  spotId    String?  @db.ObjectId
  tagId     String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Tag {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String   @unique
  tagPictureUrl String
  category      CategoriesSpotAndTag
  spots         TagsOnSpots[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model SpotPicture {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  spot      Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)
  spotId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rate      Int
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String   @unique @db.ObjectId
  spot      Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)
  spotId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String   @unique @db.ObjectId
  spot      Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)
  spotId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Product {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  photoUrl  String?
  gamePoints Int
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
